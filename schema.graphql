# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BattingStats {
  ballsFaced: Float!
  fifties: Float!
  fours: Float!
  highestScore: Float!
  hundreds: Float!
  id: ID!
  innings: Float!
  notOuts: Float!
  runs: Float!
  sixes: Float!
}

"""The batting style of the player"""
enum BattingStyle {
  LEFT_HANDED
  RIGHT_HANDED
}

type BowlingStats {
  id: ID!
  innings: Int!
  maidens: Int!
  overs: Float!
  runs: Int!
  wickets: Int!
}

"""The bowling style of the player"""
enum BowlingStyle {
  LEFT_ARM_FAST
  LEFT_ARM_FAST_MEDIUM
  LEFT_ARM_MEDIUM
  LEFT_ARM_ORTHODOX
  LEFT_ARM_UNORTHODOX
  RIGHT_ARM_FAST
  RIGHT_ARM_FAST_MEDIUM
  RIGHT_ARM_LEG_BREAK
  RIGHT_ARM_MEDIUM
  RIGHT_ARM_OFF_BREAK
}

type CareerStats {
  id: ID!
  matches: Int!
  player: Player!
  totalRuns: Int!
  totalWickets: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type FieldingStats {
  catches: Int!
  id: ID!
  runOuts: Int!
  stumpings: Int!
}

type Group {
  id: ID!
  name: String!
  players: [Player!]!
}

type Match {
  date: DateTimeISO!
  id: ID!
  maxOvers: Float!
  teams: [Team!]!
}

type MatchPerformance {
  id: ID!
}

type Mutation {
  createBattingStat(ballsFaced: Float!, careerStatsId: String!, fifties: Float!, fours: Float!, highestScore: Float!, hundreds: Float!, innings: Float!, notOuts: Float!, runs: Float!, sixes: Float!): BattingStats!
  createBowlingStat(careerStatsId: String!, innings: Float!, maidens: Float!, overs: Float!, runs: Float!, wickets: Float!): BowlingStats!
  createCareerStat(playerId: String!): CareerStats!
  createFieldingStat(careerStatsId: String!, catches: Float!, runOuts: Float!, stumpings: Float!): FieldingStats!
  createGroup(name: String!): Group!
  createMatch(date: DateTimeISO!, groupId: String!, maxOvers: Float!): Match!
  createMatchPerformance(battingStatsId: String, bowlingStatsId: String, fieldingStatsId: String, matchId: String!, playerId: String!): MatchPerformance!
  createPlayer(battingStyle: BattingStyle!, bowlingStyle: BowlingStyle, groupId: String!, name: String!, role: PlayerRole!): Player!
  createTeam(name: String!): Team!
  deleteBattingStat(id: String!): Boolean!
  deleteBowlingStat(id: String!): Boolean!
  deleteCareerStat(id: String!): Boolean!
  deleteFieldingStat(id: String!): Boolean!
  deleteGroup(id: String!): Boolean!
  deleteMatch(id: String!): Boolean!
  deleteMatchPerformance(id: String!): Boolean!
  deletePlayer(id: String!): Boolean!
  deleteTeam(id: String!): Boolean!
  updateBattingStat(ballsFaced: Float, fifties: Float, fours: Float, highestScore: Float, hundreds: Float, id: String!, innings: Float, notOuts: Float, runs: Float, sixes: Float): BattingStats
  updateBowlingStat(id: String!, innings: Float, maidens: Float, overs: Float, runs: Float, wickets: Float): BowlingStats
  updateCareerStat(id: String!, playerId: String): CareerStats
  updateFieldingStat(catches: Float, id: String!, runOuts: Float, stumpings: Float): FieldingStats
  updateGroup(id: String!, name: String, playerIds: [String!]): Group
  updateMatch(date: DateTimeISO, groupId: String, id: String!, maxOvers: Float): Match
  updateMatchPerformance(battingStatsId: String, bowlingStatsId: String, fieldingStatsId: String, id: String!, matchId: String, playerId: String): MatchPerformance
  updatePlayer(battingStyle: BattingStyle, bowlingStyle: BowlingStyle, id: String!, name: String, role: PlayerRole): Player
  updateTeam(id: String!, name: String): Team
}

type Player {
  battingStyle: BattingStyle!
  bowlingStyle: BowlingStyle
  careerStats: CareerStats!
  groups: [Group!]!
  id: ID!
  name: String!
  role: PlayerRole!
}

enum PlayerRole {
  ALL_ROUNDER
  BATSMAN
  BOWLER
  WICKETKEEPER
}

type Query {
  getBattingStatById(id: String!): BattingStats
  getBattingStats: [BattingStats!]!
  getBowlingStatById(id: String!): BowlingStats
  getBowlingStats: [BowlingStats!]!
  getCareerStatById(id: String!): CareerStats
  getCareerStats: [CareerStats!]!
  getFieldingStatById(id: String!): FieldingStats
  getFieldingStats: [FieldingStats!]!
  getGroupById(id: String!): Group
  getGroups: [Group!]!
  getMatchById(id: String!): Match
  getMatchPerformanceById(id: String!): MatchPerformance
  getMatchPerformances: [MatchPerformance!]!
  getMatches: [Match!]!
  getPlayerById(id: String!): Player
  getPlayers: [Player!]!
  getPlayersInGroup(groupId: String!): [Player!]
  getTeamById(id: String!): Team
  getTeams: [Team!]!
}

type Team {
  id: ID!
  matches: [Match!]!
  name: String!
  players: [Player!]!
}